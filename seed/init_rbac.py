"""
===============================================================
 Script kh·ªüi t·∫°o RBAC (Role-Based Access Control)
---------------------------------------------------------------
Nhi·ªám v·ª•:
    - T·∫°o c√°c Roles (quy·ªÅn h·∫°n nh∆∞ admin, user, editor, moderator)
    - T·∫°o c√°c Permissions (quy·ªÅn thao t√°c c·ª• th·ªÉ)
    - G√°n Permissions cho t·ª´ng Role
    - (Tu·ª≥ ch·ªçn) T·∫°o c√°c t√†i kho·∫£n test ·ª©ng v·ªõi t·ª´ng Role
    - Hi·ªÉn th·ªã t√≥m t·∫Øt c·∫•u tr√∫c RBAC sau khi kh·ªüi t·∫°o
---------------------------------------------------------------
C√°ch ch·∫°y:
    python seed/init_rbac.py
===============================================================
"""

import sys
import os

# =============================================================
# 1Ô∏è‚É£ C·∫§U H√åNH ƒê∆Ø·ªúNG D·∫™N PYTHON
# -------------------------------------------------------------
# M·ª•c ƒë√≠ch: th√™m th∆∞ m·ª•c g·ªëc c·ªßa project v√†o sys.path
# ƒë·ªÉ c√≥ th·ªÉ import ƒë∆∞·ª£c c√°c module trong th∆∞ m·ª•c app/
# =============================================================

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# =============================================================
# 2Ô∏è‚É£ IMPORT C√ÅC MODULE C·∫¶N THI·∫æT
# -------------------------------------------------------------
# - create_app: kh·ªüi t·∫°o Flask app (theo m√¥ h√¨nh factory)
# - db: ƒë·ªëi t∆∞·ª£ng SQLAlchemy ƒë·ªÉ thao t√°c DB
# - User: model ng∆∞·ªùi d√πng
# - Role, Permission: model d√πng cho h·ªá th·ªëng ph√¢n quy·ªÅn RBAC
# - init_default_roles(): t·∫°o c√°c role m·∫∑c ƒë·ªãnh
# - init_default_permissions(): t·∫°o c√°c permission m·∫∑c ƒë·ªãnh
# - assign_default_permissions(): g√°n quy·ªÅn cho t·ª´ng role
# =============================================================

from app import create_app, db
from app.models import User
from app.models_rbac import Role, Permission, init_default_roles, init_default_permissions, assign_default_permissions


# =============================================================
# 3Ô∏è‚É£ H√ÄM T·∫†O NG∆Ø·ªúI D√ôNG TEST
# -------------------------------------------------------------
# M·ª•c ƒë√≠ch:
#   - T·∫°o s·∫µn c√°c t√†i kho·∫£n test ·ª©ng v·ªõi t·ª´ng role (admin, editor, moderator, user)
#   - D·ªÖ d√†ng ki·ªÉm tra ch·ª©c nƒÉng ph√¢n quy·ªÅn sau khi kh·ªüi t·∫°o RBAC
# =============================================================

def create_test_users():
    """T·∫°o users test cho t·ª´ng role (n·∫øu ch∆∞a c√≥)"""
    print("\nüë• Creating test users...")

    # Danh s√°ch ng∆∞·ªùi d√πng test c·∫ßn t·∫°o
    test_users = [
        {'username': 'admin', 'email': 'admin@example.com', 'password': 'admin123', 'role': 'admin'},
        {'username': 'editor', 'email': 'editor@example.com', 'password': 'editor123', 'role': 'editor'},
        {'username': 'moderator', 'email': 'moderator@example.com', 'password': 'mod123', 'role': 'moderator'},
        {'username': 'testuser', 'email': 'user@example.com', 'password': 'user123', 'role': 'user'}
    ]

    created_count = 0

    # L·∫∑p qua t·ª´ng user trong danh s√°ch
    for user_data in test_users:
        # Ki·ªÉm tra n·∫øu username ƒë√£ t·ªìn t·∫°i -> b·ªè qua
        existing = User.query.filter_by(username=user_data['username']).first()
        if existing:
            print(f"  ‚ö† User '{user_data['username']}' already exists")
            continue

        # T√¨m role t∆∞∆°ng ·ª©ng trong DB
        role = Role.query.filter_by(name=user_data['role']).first()
        if not role:
            print(f"  ‚ùå Role '{user_data['role']}' not found ‚Äî h√£y ch·∫Øc ch·∫Øn ƒë√£ init roles tr∆∞·ªõc")
            continue

        # T·∫°o ƒë·ªëi t∆∞·ª£ng User m·ªõi
        user = User(
            username=user_data['username'],
            email=user_data['email'],
            role_id=role.id
        )
        user.set_password(user_data['password'])  # M√£ ho√° m·∫≠t kh·∫©u
        db.session.add(user)
        created_count += 1
        print(f"  ‚úì Created: {user_data['username']} ({user_data['role']})")

    # Commit c√°c user m·ªõi v√†o database
    if created_count > 0:
        db.session.commit()
        print(f"‚úÖ Created {created_count} test users")
    else:
        print("‚úì No new users created")


# =============================================================
# 4Ô∏è‚É£ H√ÄM HI·ªÇN TH·ªä T√ìM T·∫ÆT RBAC
# -------------------------------------------------------------
# M·ª•c ƒë√≠ch:
#   - In ra danh s√°ch roles, permissions, s·ªë user thu·ªôc m·ªói role
#   - Gi√∫p dev ki·ªÉm tra h·ªá th·ªëng RBAC ƒë√£ setup th√†nh c√¥ng ch∆∞a
# =============================================================

def show_rbac_summary():
    """Hi·ªÉn th·ªã t√≥m t·∫Øt RBAC sau khi setup"""
    print("\n" + "=" * 60)
    print("üìä RBAC SUMMARY")
    print("=" * 60)

    # L·∫•y danh s√°ch t·∫•t c·∫£ roles (∆∞u ti√™n role c√≥ priority cao)
    roles = Role.query.order_by(Role.priority.desc()).all()

    # Duy·ªát t·ª´ng role v√† hi·ªÉn th·ªã th√¥ng tin
    for role in roles:
        print(f"\nüé≠ {role.display_name} ({role.name})")
        print(f"   Priority: {role.priority} | Users: {role.user_count}")
        print(f"   Permissions: {role.permissions.count()}")

        # Hi·ªÉn th·ªã 5 permission ƒë·∫ßu ti√™n c·ªßa m·ªói role (n·∫øu c√≥ nhi·ªÅu)
        perms = role.permissions.limit(5).all()
        for p in perms:
            print(f"     - {p.display_name}")
        if role.permissions.count() > 5:
            print(f"     ... and {role.permissions.count() - 5} more")

    # Hi·ªÉn th·ªã th√¥ng tin k·∫øt th√∫c v√† t√†i kho·∫£n test login
    print("\n" + "=" * 60)
    print("‚úÖ RBAC Setup Complete!")
    print("=" * 60)

    print("\nüìù Test Login Credentials:")
    print("  Admin:     admin@example.com / admin123")
    print("  Editor:    editor@example.com / editor123")
    print("  Moderator: moderator@example.com / mod123")
    print("  User:      user@example.com / user123")
    print()


# =============================================================
# 5Ô∏è‚É£ H√ÄM CH√çNH (MAIN FUNCTION)
# -------------------------------------------------------------
# M·ª•c ƒë√≠ch:
#   - T·∫°o Flask app v√† m·ªü context ƒë·ªÉ l√†m vi·ªác v·ªõi DB
#   - G·ªçi l·∫ßn l∆∞·ª£t c√°c b∆∞·ªõc kh·ªüi t·∫°o h·ªá th·ªëng RBAC
# =============================================================

def main():
    """H√†m ch√≠nh kh·ªüi t·∫°o RBAC"""
    app = create_app()  # T·∫°o ·ª©ng d·ª•ng Flask t·ª´ factory

    # M·ªü application context ƒë·ªÉ c√≥ th·ªÉ truy c·∫≠p DB v√† models
    with app.app_context():
        print("\nüöÄ Starting RBAC Initialization...")
        print("=" * 60)

        # B∆∞·ªõc 1: T·∫°o Roles m·∫∑c ƒë·ªãnh (admin, editor, moderator, user)
        print("\n1Ô∏è‚É£ Creating Roles...")
        init_default_roles()

        # B∆∞·ªõc 2: T·∫°o Permissions m·∫∑c ƒë·ªãnh (v√≠ d·ª•: manage_users, view_products, v.v.)
        print("\n2Ô∏è‚É£ Creating Permissions...")
        init_default_permissions()

        # B∆∞·ªõc 3: G√°n Permissions cho t·ª´ng Role
        print("\n3Ô∏è‚É£ Assigning Permissions to Roles...")
        assign_default_permissions()

        # (T√πy ch·ªçn) B∆∞·ªõc 4: T·∫°o ng∆∞·ªùi d√πng test n·∫øu b·∫°n mu·ªën
        create_test = input("\n‚ùì Create test users? (y/n): ").lower() == 'y'
        if create_test:
            create_test_users()

        # B∆∞·ªõc 5: Hi·ªÉn th·ªã k·∫øt qu·∫£ t·ªïng quan RBAC
        show_rbac_summary()


# =============================================================
# 6Ô∏è‚É£ ƒêI·ªÇM KH·ªûI CH·∫†Y SCRIPT
# -------------------------------------------------------------
# Khi ch·∫°y file n√†y tr·ª±c ti·∫øp (python seed/init_rbac.py),
# ch∆∞∆°ng tr√¨nh s·∫Ω g·ªçi h√†m main().
# =============================================================

if __name__ == '__main__':
    main()
