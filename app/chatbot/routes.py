from flask import request, jsonify, session, current_app
from . import chatbot_bp
import google.generativeai as genai
from datetime import datetime
import json
import os

# Bi·∫øn global cho model
model = None


def init_gemini():
    """Kh·ªüi t·∫°o Gemini API"""
    global model
    api_key = current_app.config.get('GEMINI_API_KEY')
    if api_key:
        try:
            genai.configure(api_key=api_key)
            # FIX: ƒê·ªïi t√™n model sang phi√™n b·∫£n ·ªïn ƒë·ªãnh
            model = genai.GenerativeModel('gemini-2.0-flash-lite')
            current_app.logger.info("Gemini API initialized successfully")
        except Exception as e:
            current_app.logger.error(f"Failed to initialize Gemini API: {str(e)}")
            model = None
    else:
        current_app.logger.warning("GEMINI_API_KEY not found in config")
        model = None


def load_company_info():
    """ƒê·ªçc th√¥ng tin c√¥ng ty t·ª´ file JSON"""
    json_path = os.path.join(current_app.root_path, 'chatbot', 'company_info.json')
    try:
        with open(json_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        current_app.logger.error(f"company_info.json not found at {json_path}")
        return {}
    except json.JSONDecodeError as e:
        current_app.logger.error(f"Invalid JSON in company_info.json: {str(e)}")
        return {}


def create_system_prompt(company_info):
    """T·∫°o system prompt ƒë·ªÉ Gemini nh·∫≠p vai nh√¢n vi√™n t∆∞ v·∫•n"""
    if not company_info:
        return "B·∫°n l√† tr·ª£ l√Ω ·∫£o th√¢n thi·ªán c·ªßa Hoangvn, chuy√™n t∆∞ v·∫•n v·ªÅ c√°c s·∫£n ph·∫©m v√† d·ªãch v·ª•."

    services_text = "\n".join([
        f"- {s['name']}: {s['price']} - {s['description']}"
        for s in company_info.get('services', [])
    ])

    strengths_text = "\n".join([
        f"- {s}" for s in company_info.get('strengths', [])
    ])

    prompt = f"""
B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n kh√°ch h√†ng chuy√™n nghi·ªáp c·ªßa c√¥ng ty {company_info.get('company_name', 'Hoangvn')}.

**TH√îNG TIN C√îNG TY:**
- T√™n c√¥ng ty: {company_info.get('company_name', 'Hoangvn')}
- Lƒ©nh v·ª±c: {company_info.get('business', 'Kinh doanh ƒëa ng√†nh')}
- ƒêi·ªán tho·∫°i: {company_info.get('contact', {}).get('phone', '098.422.6602')}
- Email: {company_info.get('contact', {}).get('email', 'info@hoang.vn')}
- ƒê·ªãa ch·ªâ: {company_info.get('contact', {}).get('address', 'CN 1: 982/l98/a1 T√¢n B√¨nh, T√¢n Ph√∫, Nh√† B√®, TP.HCM')}
- Gi·ªù l√†m vi·ªác: {company_info.get('working_hours', '8:00 - 17:30 (Th·ª© 2 - Th·ª© 7)')}

**D·ªäCH V·ª§/S·∫¢N PH·∫®M CUNG C·∫§P:**
{services_text if services_text else "- Vui l√≤ng li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt"}

**∆ØU ƒêI·ªÇM:**
{strengths_text if strengths_text else "- ƒê·ªôi ng≈© chuy√™n nghi·ªáp, t·∫≠n t√¢m\n- Gi√° c·∫£ c·∫°nh tranh\n- Ch·∫•t l∆∞·ª£ng ƒë·∫£m b·∫£o"}

**VAI TR√í C·ª¶A B·∫†N:**
1. T∆∞ v·∫•n chuy√™n nghi·ªáp, th√¢n thi·ªán, l·ªãch s·ª±
2. Tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ s·∫£n ph·∫©m/d·ªãch v·ª•, gi√° c·∫£, quy tr√¨nh l√†m vi·ªác
3. N·∫øu kh√°ch h·ªèi ngo√†i ph·∫°m vi (v√≠ d·ª•: th·ªùi ti·∫øt, ch√≠nh tr·ªã), h√£y l·ªãch s·ª± t·ª´ ch·ªëi v√† g·ª£i √Ω quay l·∫°i ch·ªß ƒë·ªÅ s·∫£n ph·∫©m/d·ªãch v·ª•
4. Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi m·ªü ƒë·ªÉ kh√°ch h√†ng ti·∫øp t·ª•c trao ƒë·ªïi
5. N·∫øu kh√°ch h√†ng mu·ªën ƒë·∫∑t h√†ng/d·ªãch v·ª•, h√£y h∆∞·ªõng d·∫´n li√™n h·ªá qua:
   - Hotline: {company_info.get('contact', {}).get('phone', '098.422.6602')}
   - Zalo: {company_info.get('contact', {}).get('zalo', '098.422.6602')}
   - Email: {company_info.get('contact', {}).get('email', 'info@hoang.vn')}

**C√ÅCH TR·∫¢ L·ªúI:**
- Ng·∫Øn g·ªçn, s√∫c t√≠ch (2-4 c√¢u)
- D√πng emoji ph√π h·ª£p (üòä, üëç, üåü, ‚úÖ) nh∆∞ng kh√¥ng qu√° nhi·ªÅu
- G·ªçi kh√°ch l√† "anh/ch·ªã" ho·∫∑c "qu√Ω kh√°ch"
- Kh√¥ng vi·∫øt d√†i d√≤ng nh∆∞ vƒÉn b·∫£n ch√≠nh th·ª©c
- N·∫øu kh√¥ng bi·∫øt th√¥ng tin ch√≠nh x√°c, h√£y th√†nh th·∫≠t n√≥i v√† ƒë·ªÅ ngh·ªã kh√°ch li√™n h·ªá tr·ª±c ti·∫øp

**V√ç D·ª§ TR·∫¢ L·ªúI:**
Kh√°ch: "C√°c b·∫°n c√≥ nh·ªØng s·∫£n ph·∫©m g√¨?"
B·∫°n: "D·∫°, {company_info.get('company_name', 'Hoangvn')} ch√∫ng t√¥i chuy√™n cung c·∫•p [li·ªát k√™ 2-3 s·∫£n ph·∫©m ch√≠nh] ·∫°. T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu ƒë∆∞·ª£c ki·ªÉm ƒë·ªãnh ch·∫•t l∆∞·ª£ng v√† c√≥ ch·∫ø ƒë·ªô b·∫£o h√†nh t·ªët üòä Anh/ch·ªã quan t√¢m ƒë·∫øn s·∫£n ph·∫©m n√†o ·∫°?"

Kh√°ch: "Gi√° c·∫£ th·∫ø n√†o?"
B·∫°n: "D·∫°, gi√° c·ªßa ch√∫ng t√¥i r·∫•t c·∫°nh tranh v√† t√πy thu·ªôc v√†o s·∫£n ph·∫©m/d·ªãch v·ª• c·ª• th·ªÉ ·∫°. ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n b√°o gi√° ch√≠nh x√°c nh·∫•t, anh/ch·ªã vui l√≤ng li√™n h·ªá hotline {company_info.get('contact', {}).get('phone', '098.422.6602')} ho·∫∑c chat Zalo ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh ch√≥ng nh√© üìû"

B√¢y gi·ªù h√£y b·∫Øt ƒë·∫ßu t∆∞ v·∫•n!
"""
    return prompt


@chatbot_bp.route('/send', methods=['POST'])
def send_message():
    """API endpoint x·ª≠ l√Ω tin nh·∫Øn t·ª´ chatbot"""
    global model

    # Ki·ªÉm tra chatbot c√≥ ƒë∆∞·ª£c b·∫≠t kh√¥ng
    if not current_app.config.get('CHATBOT_ENABLED', True):
        return jsonify({
            'response': 'Chatbot hi·ªán ƒëang b·∫£o tr√¨. Vui l√≤ng li√™n h·ªá hotline: 098.422.6602 üòä'
        }), 503

    # Kh·ªüi t·∫°o model n·∫øu ch∆∞a c√≥
    if model is None:
        init_gemini()

    if model is None:
        return jsonify({
            'response': 'Xin l·ªói, chatbot hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng li√™n h·ªá tr·ª±c ti·∫øp qua hotline: 098.422.6602 ho·∫∑c Zalo: 098.422.6602 üòä'
        }), 500

    try:
        # L·∫•y tin nh·∫Øn t·ª´ frontend
        data = request.json
        user_message = data.get('message', '').strip()

        if not user_message:
            return jsonify({'error': 'Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'}), 400

        # Gi·ªõi h·∫°n ƒë·ªô d√†i tin nh·∫Øn
        if len(user_message) > 500:
            return jsonify({'error': 'Tin nh·∫Øn qu√° d√†i. Vui l√≤ng nh·∫≠p t·ªëi ƒëa 500 k√Ω t·ª±'}), 400

        # Ki·ªÉm tra gi·ªõi h·∫°n request
        if 'chatbot_request_count' not in session:
            session['chatbot_request_count'] = 0
            session['chatbot_request_start_time'] = datetime.now().timestamp()

        # Reset counter n·∫øu ƒë√£ qua 1 gi·ªù
        current_time = datetime.now().timestamp()
        request_limit = current_app.config.get('CHATBOT_REQUEST_LIMIT', 30)
        request_window = current_app.config.get('CHATBOT_REQUEST_WINDOW', 3600)

        if current_time - session['chatbot_request_start_time'] > request_window:
            session['chatbot_request_count'] = 0
            session['chatbot_request_start_time'] = current_time

        # Ki·ªÉm tra v∆∞·ª£t gi·ªõi h·∫°n
        if session['chatbot_request_count'] >= request_limit:
            return jsonify({
                'response': f'Xin l·ªói, b·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n {request_limit} tin nh·∫Øn/gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp:\nüìû Hotline: 098.422.6602\nüí¨ Zalo: 098.422.6602\nüìß Email: info@hoang.vn'
            })

        # TƒÉng counter
        session['chatbot_request_count'] += 1

        # L∆∞u l·ªãch s·ª≠ chat
        if 'chatbot_history' not in session:
            session['chatbot_history'] = []

        # T·∫°o context t·ª´ l·ªãch s·ª≠ (l·∫•y 5 tin nh·∫Øn g·∫ßn nh·∫•t)
        history_context = "\n".join([
            f"{'Kh√°ch h√†ng' if msg['role'] == 'user' else 'B·∫°n'}: {msg['content']}"
            for msg in session['chatbot_history'][-5:]
        ])

        # Load company info v√† t·∫°o prompt
        company_info = load_company_info()
        system_prompt = create_system_prompt(company_info)

        full_prompt = f"{system_prompt}\n\n**L·ªäCH S·ª¨ H·ªòI THO·∫†I:**\n{history_context}\n\n**TIN NH·∫ÆN M·ªöI T·ª™ KH√ÅCH H√ÄNG:**\n{user_message}\n\n**TR·∫¢ L·ªúI:**"

        # G·ªçi Gemini API v·ªõi c·∫•u h√¨nh an to√†n h∆°n
        try:
            response = model.generate_content(
                full_prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=0.7,
                    max_output_tokens=500,
                    top_p=0.95,
                    top_k=40
                ),
                safety_settings=[
                    {
                        "category": "HARM_CATEGORY_HARASSMENT",
                        "threshold": "BLOCK_NONE"
                    },
                    {
                        "category": "HARM_CATEGORY_HATE_SPEECH",
                        "threshold": "BLOCK_NONE"
                    },
                    {
                        "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        "threshold": "BLOCK_NONE"
                    },
                    {
                        "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                        "threshold": "BLOCK_NONE"
                    }
                ]
            )

            # Ki·ªÉm tra response c√≥ text kh√¥ng
            if hasattr(response, 'text') and response.text:
                bot_reply = response.text
            else:
                current_app.logger.warning(f"Empty response from Gemini API: {response}")
                bot_reply = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. Vui l√≤ng li√™n h·ªá:\nüìû Hotline: 098.422.6602\nüí¨ Zalo: 098.422.6602 üòä"

        except Exception as api_error:
            current_app.logger.error(f"Gemini API error: {str(api_error)}")
            return jsonify({
                'response': 'Xin l·ªói, h·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá:\nüìû Hotline: 098.422.6602\nüí¨ Zalo: 098.422.6602'
            }), 500

        # L∆∞u v√†o l·ªãch s·ª≠
        session['chatbot_history'].append({'role': 'user', 'content': user_message})
        session['chatbot_history'].append({'role': 'assistant', 'content': bot_reply})

        # Gi·ªõi h·∫°n l·ªãch s·ª≠ (ch·ªâ gi·ªØ 20 tin nh·∫Øn g·∫ßn nh·∫•t)
        if len(session['chatbot_history']) > 20:
            session['chatbot_history'] = session['chatbot_history'][-20:]

        # L∆∞u session
        session.modified = True

        return jsonify({
            'response': bot_reply,
            'remaining_requests': request_limit - session['chatbot_request_count']
        })

    except Exception as e:
        current_app.logger.error(f"Chatbot error: {str(e)}", exc_info=True)
        return jsonify({
            'response': 'Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá:\nüìû Hotline: 098.422.6602\nüí¨ Zalo: 098.422.6602 üòä'
        }), 500


@chatbot_bp.route('/reset', methods=['POST'])
def reset_chat():
    """Reset l·ªãch s·ª≠ chat"""
    try:
        session.pop('chatbot_history', None)
        session.pop('chatbot_request_count', None)
        session.pop('chatbot_request_start_time', None)
        return jsonify({
            'status': 'success',
            'message': 'ƒê√£ l√†m m·ªõi h·ªôi tho·∫°i th√†nh c√¥ng!'
        })
    except Exception as e:
        current_app.logger.error(f"Reset chat error: {str(e)}")
        return jsonify({
            'status': 'error',
            'message': 'Kh√¥ng th·ªÉ l√†m m·ªõi h·ªôi tho·∫°i'
        }), 500